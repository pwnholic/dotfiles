{
  "Gin Basic Server": {
    "prefix": "gin-server",
    "body": [
      "package main",
      "",
      "import (",
      "\t\"net/http\"",
      "\t\"github.com/gin-gonic/gin\"",
      ")",
      "",
      "func main() {",
      "\t// Initialize Gin router",
      "\tr := gin.Default()",
      "",
      "\t// Basic route",
      "\tr.GET(\"/\", func(c *gin.Context) {",
      "\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Welcome to Gin!\"})",
      "\t})",
      "",
      "\t// Run the server",
      "\tr.Run(\":${1:8080}\")",
      "}"
    ],
    "description": "Basic Gin server setup"
  },
  "Gin Route Group": {
    "prefix": "gin-group",
    "body": [
      "${1:api} := r.Group(\"/${2:api}\")",
      "{",
      "\t${1}.GET(\"/${3:endpoint}\", ${4:handlerFunction})",
      "\t${1}.POST(\"/${3:endpoint}\", ${4:handlerFunction})",
      "\t// Add more routes here",
      "}"
    ],
    "description": "Create a route group in Gin"
  },
  "Gin Middleware": {
    "prefix": "gin-middleware",
    "body": [
      "func ${1:AuthMiddleware}() gin.HandlerFunc {",
      "\treturn func(c *gin.Context) {",
      "\t\t${2:// Middleware logic here}",
      "\t\t${3:token := c.GetHeader(\"Authorization\")}",
      "\t\t${4:// Validate token or perform other checks}",
      "\t\t",
      "\t\t// Call next handler if validation passes",
      "\t\tc.Next()",
      "\t}",
      "}"
    ],
    "description": "Gin middleware function"
  },
  "Gin CRUD Handlers": {
    "prefix": "gin-crud",
    "body": [
      "// Create",
      "func create${1:Resource}(c *gin.Context) {",
      "\tvar input ${2:CreateRequest}",
      "\tif err := c.ShouldBindJSON(&input); err != nil {",
      "\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})",
      "\t\treturn",
      "\t}",
      "\t",
      "\t${3:// Save to database or perform business logic}",
      "\t",
      "\tc.JSON(http.StatusCreated, gin.H{\"data\": ${4:result}})",
      "}",
      "",
      "// Read (Get All)",
      "func get${1}s(c *gin.Context) {",
      "\t${5:// Get all resources from database}",
      "\tc.JSON(http.StatusOK, gin.H{\"data\": ${6:resources}})",
      "}",
      "",
      "// Read (Get One)",
      "func get${1}(c *gin.Context) {",
      "\tid := c.Param(\"id\")",
      "\t${7:// Get single resource from database}",
      "\tc.JSON(http.StatusOK, gin.H{\"data\": ${8:resource}})",
      "}",
      "",
      "// Update",
      "func update${1}(c *gin.Context) {",
      "\tid := c.Param(\"id\")",
      "\tvar input ${9:UpdateRequest}",
      "\tif err := c.ShouldBindJSON(&input); err != nil {",
      "\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})",
      "\t\treturn",
      "\t}",
      "\t",
      "\t${10:// Update resource in database}",
      "\t",
      "\tc.JSON(http.StatusOK, gin.H{\"data\": ${11:updatedResource}})",
      "}",
      "",
      "// Delete",
      "func delete${1}(c *gin.Context) {",
      "\tid := c.Param(\"id\")",
      "\t${12:// Delete resource from database}",
      "\tc.JSON(http.StatusOK, gin.H{\"data\": \"${1} deleted successfully\"})",
      "}"
    ],
    "description": "Complete CRUD handlers for Gin"
  },
  "Gin Error Handling": {
    "prefix": "gin-error",
    "body": [
      "if err != nil {",
      "\tc.JSON(http.StatusInternalServerError, gin.H{",
      "\t\t\"error\": \"${1:Something went wrong}\",",
      "\t\t\"details\": err.Error(),",
      "\t})",
      "\treturn",
      "}"
    ],
    "description": "Standard error handling in Gin"
  },
  "Gin File Upload": {
    "prefix": "gin-upload",
    "body": [
      "func upload${1:File}(c *gin.Context) {",
      "\tfile, err := c.FormFile(\"${2:file}\")",
      "\tif err != nil {",
      "\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})",
      "\t\treturn",
      "\t}",
      "",
      "\t// Save the file",
      "\tdst := \"${3:./uploads/}\" + file.Filename",
      "\tif err := c.SaveUploadedFile(file, dst); err != nil {",
      "\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})",
      "\t\treturn",
      "\t}",
      "",
      "\tc.JSON(http.StatusOK, gin.H{",
      "\t\t\"message\": \"File uploaded successfully\",",
      "\t\t\"path\": dst,",
      "\t})",
      "}"
    ],
    "description": "File upload handler for Gin"
  },
  "Gin Production Server": {
    "prefix": "gin-prod-server",
    "body": [
      "package main",
      "",
      "import (",
      "\t\"context\"",
      "\t\"log\"",
      "\t\"net/http\"",
      "\t\"os\"",
      "\t\"os/signal\"",
      "\t\"syscall\"",
      "\t\"time\"",
      "",
      "\t\"github.com/gin-gonic/gin\"",
      "\t\"github.com/gin-contrib/pprof\"",
      "\t\"github.com/gin-contrib/timeout\"",
      "\t\"github.com/gin-contrib/requestid\"",
      "\t\"github.com/gin-contrib/logger\"",
      "\t\"github.com/gin-contrib/graceful\"",
      ")",
      "",
      "func main() {",
      "\t// Configuration",
      "\tport := os.Getenv(\"PORT\")",
      "\tif port == \"\" {",
      "\t\tport = \"8080\"",
      "\t}",
      "",
      "\t// Initialize Gin",
      "\tif os.Getenv(\"GIN_MODE\") == \"release\" {",
      "\t\tgin.SetMode(gin.ReleaseMode)",
      "\t}",
      "",
      "\tr := gin.New()",
      "",
      "\t// Production middlewares",
      "\tr.Use(",
      "\t\tgin.Recovery(),",
      "\t\trequestid.New(),",
      "\t\tlogger.SetLogger(),",
      "\t\ttimeout.New(",
      "\t\t\ttimeout.WithTimeout(30*time.Second),",
      "\t\t\ttimeout.WithHandler(func(c *gin.Context) {",
      "\t\t\t\tc.Next()",
      "\t\t\t}),",
      "\t\t\ttimeout.WithResponse(func(c *gin.Context) {",
      "\t\t\t\tc.JSON(http.StatusRequestTimeout, gin.H{\"error\": \"request timeout\"})",
      "\t\t\t}),",
      "\t\t),",
      "\t)",
      "",
      "\t// Add pprof in non-production",
      "\tif gin.Mode() != gin.ReleaseMode {",
      "\t\tpprof.Register(r)",
      "\t}",
      "",
      "\t// Health check",
      "\tr.GET(\"/health\", func(c *gin.Context) {",
      "\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"ok\"})",
      "\t})",
      "",
      "\t// Graceful shutdown",
      "\tsrv := &http.Server{",
      "\t\tAddr:    \":\" + port,",
      "\t\tHandler: r,",
      "\t}",
      "",
      "\tgo func() {",
      "\t\tif err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {",
      "\t\t\tlog.Fatalf(\"listen: %s\\n\", err)",
      "\t\t}",
      "\t}()",
      "",
      "\t// Wait for interrupt signal",
      "\tquit := make(chan os.Signal, 1)",
      "\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)",
      "\t<-quit",
      "\tlog.Println(\"Shutting down server...\")",
      "",
      "\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)",
      "\tdefer cancel()",
      "\tif err := srv.Shutdown(ctx); err != nil {",
      "\t\tlog.Fatal(\"Server forced to shutdown:\", err)",
      "\t}",
      "",
      "\tlog.Println(\"Server exiting\")",
      "}"
    ],
    "description": "Production-ready Gin server with graceful shutdown"
  },
  "Gin JWT Auth": {
    "prefix": "gin-jwt",
    "body": [
      "func ${1:JWTAuthMiddleware}() gin.HandlerFunc {",
      "\treturn func(c *gin.Context) {",
      "\t\ttokenString := c.GetHeader(\"Authorization\")",
      "\t\tif tokenString == \"\" {",
      "\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"authorization header required\"})",
      "\t\t\treturn",
      "\t\t}",
      "",
      "\t\ttokenString = strings.Replace(tokenString, \"Bearer \", \"\", 1)",
      "",
      "\t\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {",
      "\t\t\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {",
      "\t\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])",
      "\t\t\t}",
      "\t\t\treturn []byte(os.Getenv(\"JWT_SECRET\")), nil",
      "\t\t})",
      "",
      "\t\tif err != nil {",
      "\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"invalid token\"})",
      "\t\t\treturn",
      "\t\t}",
      "",
      "\t\tif claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {",
      "\t\t\tc.Set(\"userID\", claims[\"sub\"])",
      "\t\t\tc.Set(\"userRoles\", claims[\"roles\"])",
      "\t\t\tc.Next()",
      "\t\t} else {",
      "\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"invalid token\"})",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "JWT authentication middleware for Gin"
  },
  "Gin Rate Limiter": {
    "prefix": "gin-rate-limit",
    "body": [
      "func ${1:RateLimiter}(maxRequests int, window time.Duration) gin.HandlerFunc {",
      "\tstore := memory.NewStore()",
      "\trateLimiter := tollbooth.NewLimiter(float64(maxRequests), window)",
      "\trateLimiter.SetIPLookups([]string{\"X-Forwarded-For\", \"RemoteAddr\", \"X-Real-IP\"})",
      "\trateLimiter.SetOnLimitReached(func(w http.ResponseWriter, r *http.Request) {",
      "\t\tw.Header().Set(\"Content-Type\", \"application/json\")",
      "\t\tw.WriteHeader(http.StatusTooManyRequests)",
      "\t\tjson.NewEncoder(w).Encode(gin.H{\"error\": \"too many requests\"})",
      "\t})",
      "",
      "\treturn func(c *gin.Context) {",
      "\t\thttpError := tollbooth.LimitByRequest(rateLimiter, c.Writer, c.Request)",
      "\t\tif httpError != nil {",
      "\t\t\tc.Abort()",
      "\t\t\treturn",
      "\t\t}",
      "\t\tc.Next()",
      "\t}",
      "}"
    ],
    "description": "Rate limiting middleware using tollbooth"
  },
  "Gin Structured Logging": {
    "prefix": "gin-logger",
    "body": [
      "func ${1:StructuredLogger}() gin.HandlerFunc {",
      "\treturn func(c *gin.Context) {",
      "\t\tstart := time.Now()",
      "\t\tpath := c.Request.URL.Path",
      "\t\tquery := c.Request.URL.RawQuery",
      "",
      "\t\tc.Next()",
      "",
      "\t\ttimestamp := time.Now()",
      "\t\tlatency := timestamp.Sub(start)",
      "\t\tclientIP := c.ClientIP()",
      "\t\tmethod := c.Request.Method",
      "\t\tstatusCode := c.Writer.Status()",
      "\t\terrorMessage := c.Errors.ByType(gin.ErrorTypePrivate).String()",
      "",
      "\t\tfields := map[string]interface{}{",
      "\t\t\t\"timestamp\":  timestamp,",
      "\t\t\t\"latency\":   latency,",
      "\t\t\t\"client_ip\": clientIP,",
      "\t\t\t\"method\":    method,",
      "\t\t\t\"status\":    statusCode,",
      "\t\t\t\"path\":      path,",
      "\t\t\t\"query\":     query,",
      "\t\t\t\"errors\":    errorMessage,",
      "\t\t\t\"request_id\": c.Writer.Header().Get(\"X-Request-ID\"),",
      "\t\t}",
      "",
      "\t\tif statusCode >= 500 {",
      "\t\t\tlog.WithFields(fields).Error(\"Server error\")",
      "\t\t} else if statusCode >= 400 {",
      "\t\t\tlog.WithFields(fields).Warn(\"Client error\")",
      "\t\t} else {",
      "\t\t\tlog.WithFields(fields).Info(\"Request completed\")",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Structured logging middleware for Gin"
  },
  "Gin Validation": {
    "prefix": "gin-validate",
    "body": [
      "type ${1:CreateRequest} struct {",
      "\t${2:Name} string `json:\"${3:name}\" binding:\"required,min=3,max=50\"`",
      "\t${4:Email} string `json:\"${5:email}\" binding:\"required,email\"`",
      "\t${6:Age} int `json:\"${7:age}\" binding:\"required,gte=18\"`",
      "}",
      "",
      "func ${8:createHandler}(c *gin.Context) {",
      "\tvar input ${1}",
      "\tif err := c.ShouldBindJSON(&input); err != nil {",
      "\t\terrMsgs := []string{}",
      "\t\tfor _, fieldErr := range err.(validator.ValidationErrors) {",
      "\t\t\terrMsgs = append(errMsgs, fmt.Sprintf(",
      "\t\t\t\t\"Field '%s' failed validation: '%s' (actual: '%v')\",",
      "\t\t\t\tfieldErr.Field(), fieldErr.Tag(), fieldErr.Value()))",
      "\t\t}",
      "\t\tc.JSON(http.StatusBadRequest, gin.H{\"errors\": errMsgs})",
      "\t\treturn",
      "\t}",
      "",
      "\t${9:// Process valid input}",
      "}"
    ],
    "description": "Request validation with detailed error messages"
  },
  "Gin CORS": {
    "prefix": "gin-cors",
    "body": [
      "func ${1:CORSConfig}() gin.HandlerFunc {",
      "\treturn cors.New(cors.Config{",
      "\t\tAllowOrigins:     strings.Split(os.Getenv(\"ALLOWED_ORIGINS\"), \",\"),",
      "\t\tAllowMethods:     []string{\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\"},",
      "\t\tAllowHeaders:     []string{\"Origin\", \"Content-Length\", \"Content-Type\", \"Authorization\"},",
      "\t\tExposeHeaders:    []string{\"Content-Length\"},",
      "\t\tAllowCredentials: true,",
      "\t\tMaxAge:           12 * time.Hour,",
      "\t})",
      "}"
    ],
    "description": "CORS configuration middleware"
  },
  "Gin Cache Middleware": {
    "prefix": "gin-cache",
    "body": [
      "func ${1:CacheMiddleware}(duration time.Duration) gin.HandlerFunc {",
      "\treturn func(c *gin.Context) {",
      "\t\t// Skip cache for non-GET requests",
      "\t\tif c.Request.Method != http.MethodGet {",
      "\t\t\tc.Next()",
      "\t\t\treturn",
      "\t\t}",
      "",
      "\t\tkey := c.Request.URL.RequestURI()",
      "\t\tif cached, found := cache.Get(key); found {",
      "\t\t\tc.Writer.Header().Set(\"X-Cache\", \"HIT\")",
      "\t\t\tc.Data(http.StatusOK, \"application/json\", cached.([]byte))",
      "\t\t\tc.Abort()",
      "\t\t\treturn",
      "\t\t}",
      "",
      "\t\t// Replace writer with our custom response recorder",
      "\t\twriter := newResponseRecorder(c.Writer)",
      "\t\tc.Writer = writer",
      "",
      "\t\tc.Next()",
      "",
      "\t\t// Cache successful responses",
      "\t\tif c.Writer.Status() == http.StatusOK {",
      "\t\t\tcache.Set(key, writer.body.Bytes(), duration)",
      "\t\t}",
      "\t}",
      "}",
      "",
      "type responseRecorder struct {",
      "\tgin.ResponseWriter",
      "\tbody *bytes.Buffer",
      "}",
      "",
      "func newResponseRecorder(w gin.ResponseWriter) *responseRecorder {",
      "\treturn &responseRecorder{ResponseWriter: w, body: bytes.NewBufferString(\"\")}",
      "}",
      "",
      "func (r *responseRecorder) Write(b []byte) (int, error) {",
      "\tr.body.Write(b)",
      "\treturn r.ResponseWriter.Write(b)",
      "}"
    ],
    "description": "Response caching middleware for Gin"
  },
  "Gin Config": {
    "prefix": "gin-config",
    "body": [
      "type Config struct {",
      "\tServer struct {",
      "\t\tPort         string        `env:\"PORT\" envDefault:\"8080\"`",
      "\t\tReadTimeout  time.Duration `env:\"READ_TIMEOUT\" envDefault:\"5s\"`",
      "\t\tWriteTimeout time.Duration `env:\"WRITE_TIMEOUT\" envDefault:\"10s\"`",
      "\t\tIdleTimeout  time.Duration `env:\"IDLE_TIMEOUT\" envDefault:\"60s\"`",
      "\t}",
      "\tDatabase struct {",
      "\t\tDSN string `env:\"DB_DSN,required\"`",
      "\t}",
      "\tAuth struct {",
      "\t\tJWTSecret   string        `env:\"JWT_SECRET,required\"`",
      "\t\tJWTDuration time.Duration `env:\"JWT_DURATION\" envDefault:\"24h\"`",
      "\t}",
      "}",
      "",
      "func LoadConfig() (*Config, error) {",
      "\tvar cfg Config",
      "\tif err := env.Parse(&cfg); err != nil {",
      "\t\treturn nil, fmt.Errorf(\"failed to load config: %w\", err)",
      "\t}",
      "\treturn &cfg, nil",
      "}"
    ],
    "description": "Structured configuration with environment variables"
  },
  "Gin DB Transaction": {
    "prefix": "gin-tx",
    "body": [
      "func ${1:DBTransactionMiddleware}(db *gorm.DB) gin.HandlerFunc {",
      "\treturn func(c *gin.Context) {",
      "\t\ttx := db.Begin()",
      "\t\tdefer func() {",
      "\t\t\tif r := recover(); r != nil {",
      "\t\t\t\ttx.Rollback()",
      "\t\t\t}",
      "\t\t}()",
      "",
      "\t\tc.Set(\"db_tx\", tx)",
      "\t\tc.Next()",
      "",
      "\t\tif c.Writer.Status() >= http.StatusBadRequest {",
      "\t\t\ttx.Rollback()",
      "\t\t\treturn",
      "\t\t}",
      "",
      "\t\tif err := tx.Commit().Error; err != nil {",
      "\t\t\ttx.Rollback()",
      "\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"database error\"})",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Database transaction middleware for Gin"
  }
}
