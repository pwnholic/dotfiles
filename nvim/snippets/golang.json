{
  "Read File": {
    "prefix": "readfile",
    "body": [
      "data, err := os.ReadFile(\"${1:filename}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to read file: %v\", err)",
      "}",
      "fmt.Println(string(data))"
    ],
    "description": "Read file content"
  },
  "Write File": {
    "prefix": "writefile",
    "body": [
      "err := os.WriteFile(\"${1:filename}\", []byte(${2:\"content\"}), 0644)",
      "if err != nil {",
      "    log.Fatalf(\"failed to write file: %v\", err)",
      "}"
    ],
    "description": "Write content to file"
  },
  "Check File Exists": {
    "prefix": "fileexists",
    "body": [
      "if _, err := os.Stat(\"${1:filename}\"); err == nil {",
      "    fmt.Println(\"File exists\")",
      "} else if errors.Is(err, os.ErrNotExist) {",
      "    fmt.Println(\"File does not exist\")",
      "} else {",
      "    log.Fatalf(\"failed to check file: %v\", err)",
      "}"
    ],
    "description": "Check if file exists"
  },
  "Create Directory": {
    "prefix": "createdir",
    "body": [
      "err := os.MkdirAll(\"${1:dirpath}\", 0755)",
      "if err != nil {",
      "    log.Fatalf(\"failed to create directory: %v\", err)",
      "}"
    ],
    "description": "Create directory (recursive)"
  },
  "Copy File": {
    "prefix": "copyfile",
    "body": [
      "src, err := os.Open(\"${1:source}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to open source file: %v\", err)",
      "}",
      "defer src.Close()",
      "",
      "dst, err := os.Create(\"${2:destination}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to create destination file: %v\", err)",
      "}",
      "defer dst.Close()",
      "",
      "_, err = io.Copy(dst, src)",
      "if err != nil {",
      "    log.Fatalf(\"failed to copy file: %v\", err)",
      "}"
    ],
    "description": "Copy file from source to destination"
  },
  "Delete File": {
    "prefix": "deletefile",
    "body": [
      "err := os.Remove(\"${1:filename}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to delete file: %v\", err)",
      "}"
    ],
    "description": "Delete file"
  },
  "Read Directory Files": {
    "prefix": "readdir",
    "body": [
      "entries, err := os.ReadDir(\"${1:dirname}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to read directory: %v\", err)",
      "}",
      "for _, entry := range entries {",
      "    fmt.Println(entry.Name())",
      "}"
    ],
    "description": "List files in directory"
  },
  "Walk Directory Recursively": {
    "prefix": "walkdir",
    "body": [
      "err := filepath.Walk(\"${1:root}\", func(path string, info os.FileInfo, err error) error {",
      "    if err != nil {",
      "        return err",
      "    }",
      "    fmt.Println(path)",
      "    return nil",
      "})",
      "if err != nil {",
      "    log.Fatalf(\"failed to walk directory: %v\", err)",
      "}"
    ],
    "description": "Walk through directory recursively"
  },
  "Rename or Move File": {
    "prefix": "renamefile",
    "body": [
      "err := os.Rename(\"${1:oldpath}\", \"${2:newpath}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to rename or move file: %v\", err)",
      "}"
    ],
    "description": "Rename or move file"
  },
  "Create Symlink": {
    "prefix": "createsymlink",
    "body": [
      "err := os.Symlink(\"${1:target}\", \"${2:linkname}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to create symlink: %v\", err)",
      "}"
    ],
    "description": "Create symbolic link"
  },
  "Read Symlink": {
    "prefix": "readsymlink",
    "body": [
      "target, err := os.Readlink(\"${1:linkname}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to read symlink: %v\", err)",
      "}",
      "fmt.Println(\"Symlink points to:\", target)"
    ],
    "description": "Read symbolic link target"
  },
  "Marshal JSON": {
    "prefix": "jsonmarshal",
    "body": [
      "data, err := json.Marshal(${1:obj})",
      "if err != nil {",
      "    log.Fatalf(\"failed to marshal JSON: %v\", err)",
      "}",
      "fmt.Println(string(data))"
    ],
    "description": "Convert Go struct or map to JSON string"
  },
  "Unmarshal JSON": {
    "prefix": "jsonunmarshal",
    "body": [
      "err := json.Unmarshal([]byte(${1:jsonStr}), &${2:target})",
      "if err != nil {",
      "    log.Fatalf(\"failed to unmarshal JSON: %v\", err)",
      "}"
    ],
    "description": "Parse JSON string to Go struct/map"
  },
  "Encode JSON to File": {
    "prefix": "jsonencodefile",
    "body": [
      "file, err := os.Create(\"${1:output.json}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to create JSON file: %v\", err)",
      "}",
      "defer file.Close()",
      "",
      "encoder := json.NewEncoder(file)",
      "encoder.SetIndent(\"\", \"  \")",
      "if err := encoder.Encode(${2:data}); err != nil {",
      "    log.Fatalf(\"failed to write JSON: %v\", err)",
      "}"
    ],
    "description": "Write struct/map to a pretty JSON file"
  },
  "Decode JSON from File": {
    "prefix": "jsondecodefile",
    "body": [
      "file, err := os.Open(\"${1:input.json}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to open JSON file: %v\", err)",
      "}",
      "defer file.Close()",
      "",
      "decoder := json.NewDecoder(file)",
      "if err := decoder.Decode(&${2:target}); err != nil {",
      "    log.Fatalf(\"failed to parse JSON: %v\", err)",
      "}"
    ],
    "description": "Read and decode JSON from file"
  },
  "Read CSV File": {
    "prefix": "readcsv",
    "body": [
      "file, err := os.Open(\"${1:input.csv}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to open CSV file: %v\", err)",
      "}",
      "defer file.Close()",
      "",
      "reader := csv.NewReader(file)",
      "records, err := reader.ReadAll()",
      "if err != nil {",
      "    log.Fatalf(\"failed to read CSV: %v\", err)",
      "}",
      "for _, record := range records {",
      "    fmt.Println(record)",
      "}"
    ],
    "description": "Read all records from a CSV file"
  },
  "Write CSV File": {
    "prefix": "writecsv",
    "body": [
      "file, err := os.Create(\"${1:output.csv}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to create CSV file: %v\", err)",
      "}",
      "defer file.Close()",
      "",
      "writer := csv.NewWriter(file)",
      "defer writer.Flush()",
      "",
      "// Write header",
      "writer.Write([]string{\"${2:col1}\", \"${3:col2}\"})",
      "",
      "// Write data rows",
      "writer.Write([]string{\"value1\", \"value2\"})",
      "writer.Write([]string{\"value3\", \"value4\"})"
    ],
    "description": "Write data to a CSV file"
  },
  "Read CSV Line by Line": {
    "prefix": "readcsvline",
    "body": [
      "file, err := os.Open(\"${1:input.csv}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to open CSV file: %v\", err)",
      "}",
      "defer file.Close()",
      "",
      "reader := csv.NewReader(file)",
      "for {",
      "    record, err := reader.Read()",
      "    if err == io.EOF {",
      "        break",
      "    }",
      "    if err != nil {",
      "        log.Fatalf(\"error reading CSV: %v\", err)",
      "    }",
      "    fmt.Println(record)",
      "}"
    ],
    "description": "Read CSV line by line using csv.Reader"
  },
  "CSV Write Error Check": {
    "prefix": "csvwritecheck",
    "body": [
      "if err := writer.Write(${1:record}); err != nil {",
      "    log.Fatalf(\"error writing record to CSV: %v\", err)",
      "}"
    ],
    "description": "Check error when writing CSV"
  },
  "Excel Create File": {
    "prefix": "excelcreate",
    "body": [
      "f := excelize.NewFile()",
      "index := f.NewSheet(\"${1:Sheet1}\")",
      "f.SetCellValue(\"${1:Sheet1}\", \"A1\", \"${2:Hello World}\")",
      "f.SetActiveSheet(index)",
      "if err := f.SaveAs(\"${3:output.xlsx}\"); err != nil {",
      "    log.Fatalf(\"failed to save Excel file: %v\", err)",
      "}"
    ],
    "description": "Create and write to an Excel file"
  },
  "Excel Read Cell": {
    "prefix": "excelread",
    "body": [
      "f, err := excelize.OpenFile(\"${1:file.xlsx}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to open Excel file: %v\", err)",
      "}",
      "defer f.Close()",
      "",
      "val, err := f.GetCellValue(\"${2:Sheet1}\", \"${3:A1}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to read cell: %v\", err)",
      "}",
      "fmt.Println(\"Cell value:\", val)"
    ],
    "description": "Read a specific cell from Excel"
  },
  "Excel Iterate Rows": {
    "prefix": "exceliterate",
    "body": [
      "rows, err := f.GetRows(\"${1:Sheet1}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to get rows: %v\", err)",
      "}",
      "for _, row := range rows {",
      "    fmt.Println(row)",
      "}"
    ],
    "description": "Loop through all rows in a sheet"
  },
  "SQLite Connect": {
    "prefix": "sqliteconnect",
    "body": [
      "db, err := sql.Open(\"sqlite3\", \"${1:database.db}\")",
      "if err != nil {",
      "    log.Fatalf(\"failed to connect to SQLite: %v\", err)",
      "}",
      "defer db.Close()"
    ],
    "description": "Open SQLite connection"
  },
  "SQLite Create Table": {
    "prefix": "sqlitecreatetable",
    "body": [
      "sqlStmt := `",
      "CREATE TABLE IF NOT EXISTS ${1:users} (",
      "    id INTEGER PRIMARY KEY AUTOINCREMENT,",
      "    name TEXT",
      ");`",
      "_, err := db.Exec(sqlStmt)",
      "if err != nil {",
      "    log.Fatalf(\"failed to create table: %v\", err)",
      "}"
    ],
    "description": "Create table in SQLite"
  },
  "SQLite Insert": {
    "prefix": "sqliteinsert",
    "body": [
      "stmt, err := db.Prepare(\"INSERT INTO ${1:users}(name) VALUES(?)\")",
      "if err != nil {",
      "    log.Fatalf(\"prepare insert failed: %v\", err)",
      "}",
      "defer stmt.Close()",
      "",
      "_, err = stmt.Exec(\"${2:John Doe}\")",
      "if err != nil {",
      "    log.Fatalf(\"insert failed: %v\", err)",
      "}"
    ],
    "description": "Insert record into SQLite"
  },
  "SQLite Query": {
    "prefix": "sqlitequery",
    "body": [
      "rows, err := db.Query(\"SELECT id, name FROM ${1:users}\")",
      "if err != nil {",
      "    log.Fatalf(\"query failed: %v\", err)",
      "}",
      "defer rows.Close()",
      "",
      "for rows.Next() {",
      "    var id int",
      "    var name string",
      "    err := rows.Scan(&id, &name)",
      "    if err != nil {",
      "        log.Fatalf(\"scan failed: %v\", err)",
      "    }",
      "    fmt.Printf(\"ID: %d, Name: %s\\n\", id, name)",
      "}"
    ],
    "description": "Query and iterate SQLite rows"
  }
}
