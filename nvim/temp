- `:ObsidianNew [TITLE]` to create a new note. This command has one optional argument: the title of the new note.
- `:ObsidianFollowLink [vsplit|hsplit]` to follow a note reference under the
    cursor, optionally opening it in a vertical or horizontal split.
- `:ObsidianBacklinks` for getting a picker list of references to the current
    buffer.
- `:ObsidianTags [TAG ...]` for getting a picker list of all occurrences of the
    given tags.
- `:ObsidianTemplate [NAME]` to insert a template from the templates folder,
    selecting from a list using your preferred picker. See
    |obsidian-"using-templates"| for more information.
- `:ObsidianSearch [QUERY]` to search for (or create) notes in your vault using
    `ripgrep` with your preferred picker.
- `:ObsidianPasteImg [IMGNAME]` to paste an image from the clipboard into the
    note at the cursor position by saving it to the vault and adding a markdown
    image link. You can configure the default folder to save images to with the
    `attachments.img_folder` option.
- `:ObsidianRename [NEWNAME] [--dry-run]` to rename the note of the current
    buffer or reference under the cursor, updating all backlinks across the vault.
    Since this command is still relatively new and could potentially write a lot of
    changes to your vault, I highly recommend committing the current state of your
    vault (if you’re using version control) before running it, or doing a dry-run
    first by appending "–dry-run" to the command, e.g. `:ObsidianRename new-id
    --dry-run`.
- `:ObsidianNewFromTemplate [TITLE]` to create a new note from a template in the
    templates folder. Selecting from a list using your preferred picker. This
    command has one optional argument: the title of the new note.
- `:ObsidianTOC` to load the table of contents of the current note into a picker
    list.


local function Obsidian(cmd)
return function()
        vim.ui.input({ prompt = 'Enter value for shiftwidth: ' }, function(args)
        if args == "" then 
            return vim.cmd["Obsidian"..cmd]()
            else
               return  vim.cmd["Obsidian"..cmd](args)
            end
        end)
end
end


{"<leader>nn",Obsidian"New",ft = "markdown",desc = "New Note [name]"},
{"<leader>nl","<cmd>ObsidianFollowLink<cr>",ft = "markdown",desc = "Follow Link"},
{"<leader>nb","<cmd>ObsidianBacklinks<cr>",ft = "markdown",desc = "Backlink"},
{"<leader>nT",Obsidian"Tags",ft = "markdown",desc = "Tags [tags]"},
{"<leader>nt",Obsidian"Template",ft = "markdown",desc = "Tamplate [name]"},
{"<leader>ns",Obsidian"Search",ft = "markdown",desc = " Search [query]"},
{"<leader>ni",Obsidian"PasteImg",ft = "markdown",desc = "Paste Image [name]"},
{"<leader>nr",Obsidian"Rename",ft = "markdown",desc = "Rename [new name]"},
{"<leader>no",Obsidian"NewFromTemplate",ft = "markdown",desc = "New from Template [name]"},
{"<leader>nm","<cmd>ObsidianTOC<cr>",ft = "markdown",desc = "ToC"},

