bind C-Space send-prefix
unbind C-b

# rename pane, not window
bind . command-prompt -p 'rename pane to:' 'rename-pane %%'
bind W toggle-pane-name

# move panes
bind S command-prompt -p 'send pane to:'   "join-pane -v -t '%%'"
bind J command-prompt -p 'join pane from:' "join-pane -v -s '%%'"

is_shell="ps h -o comm -t '#{pane_tty}' | \
    tail -n1 | \
    grep -iqE '^((ba|da|fi|z)?sh)\$'"

wisely_confirm_before_close="if -F '#{<=:#{window_panes},1}' \
    \"confirm kill-pane\" \
    \"if \\\"$is_shell\\\" \
    'kill-pane' \
    'confirm kill-pane'\""

# vim style key bindings
bind n   split-window -v -c '#{pane_current_path}'
bind s   split-window -v -c '#{pane_current_path}'
bind v   split-window -h -c '#{pane_current_path}'
bind C-s split-window -v -c '#{pane_current_path}'
bind C-v split-window -h -c '#{pane_current_path}'
bind C-n new-window      -c '#{pane_current_path}'
bind C-o confirm 'kill-pane -a'
bind o confirm 'kill-pane -a'
bind O resize-pane -Z
bind c "$wisely_confirm_before_close"
bind N new-window -c "#{pane_current_path}"
bind BTab previous-window
bind Tab next-window
bind r swap-pane -D
bind R swap-pane -U
bind = select-layout tiled
bind C-r choose-buffer -Z

# use the vim motion keys to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# use the vim motion keys to resize panes
bind -r C-h resize-pane -L 2
bind -r C-j resize-pane -D 2
bind -r C-k resize-pane -U 2
bind -r C-l resize-pane -R 2

# use M-0 to M-9 to select windows, create new window if it doesn't exist
bind -n M-0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind -n M-1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind -n M-2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind -n M-3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind -n M-4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind -n M-5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind -n M-6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind -n M-7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind -n M-8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind -n M-9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind 0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind 1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind 2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind 3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind 4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind 5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind 6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind 7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind 8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind 9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

# use Escape to enter copy mode if not running an TUI app
is_tui="ps h -o args -t '#{pane_tty}' \
        | grep -qE '^(sudo(\\s+--?(\\w|-)+((\\s+|=)\\S+)?)*\\s+)?(/usr/bin/)?(n?vim?|vimdiff|emacs(client)?|lem|nano|helix|kak|lazygit|fzf|nmtui|sudoedit|ssh)'"
bind -n Escape if -F '#{pane_in_mode}' 'send-keys q' { if "$is_tui" 'send-keys Escape' 'copy-mode' }
bind    Escape send-keys Escape

# integration with TUI apps
bind -n M-h if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-h' { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-j if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-k if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-k' { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-l if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-l' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-l if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-t if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-t' 'select-pane -t 1'
bind -n M-w if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-w' 'select-pane -t :.+'
bind -n M-W if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-w' 'select-pane -t :.-'
bind -n M-n if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-n' 'split-window -v -c "#{pane_current_path}"'
bind -n M-s if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-s' 'split-window -v -c "#{pane_current_path}"'
bind -n M-v if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-v if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-c if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-c' "$wisely_confirm_before_close"
bind -n M-o if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-o' "confirm 'kill-pane -a'"
bind -n M-r if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-r' 'swap-pane -D'
bind -n M-R if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-R' 'swap-pane -U'
bind -n M-= if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-=' 'select-layout tiled'
bind -n M-p if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-p' 'last-pane'
bind -T copy-mode-vi M-t select-pane -t 1
bind -T copy-mode-vi M-w select-pane -t :.+
bind -T copy-mode-vi M-W select-pane -t :.-
bind -T copy-mode-vi M-n split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-s split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-v split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-c "$wisely_confirm_before_close"
bind -T copy-mode-vi M-o confirm 'kill-pane -a'
bind -T copy-mode-vi M-r swap-pane -D
bind -T copy-mode-vi M-R swap-pane -U
bind -T copy-mode-vi M-= select-layout tiled
bind -T copy-mode-vi M-p last-pane

bind -n M-< if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' 'resize-pane -L 4'
bind -n M-> if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' 'resize-pane -R 4'
bind -n M-, if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' 'resize-pane -L 4'
bind -n M-. if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' 'resize-pane -R 4'
bind -n M-- if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M--' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))\""
bind -n M-+ if "$is_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-+' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))\""
bind -T copy-mode-vi M-< resize-pane -L 4
bind -T copy-mode-vi M-> resize-pane -R 4
bind -T copy-mode-vi M-, resize-pane -L 4
bind -T copy-mode-vi M-. resize-pane -R 4
bind -T copy-mode-vi M-- run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))"
bind -T copy-mode-vi M-+ run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))"

bind -n M-O resize-pane -Z
bind -n M-C confirm kill-window
bind -n M-N new-window      -c '#{pane_current_path}'
bind -n M-S split-window -v -c '#{pane_current_path}'
bind -n M-V split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-O resize-pane -Z
bind -T copy-mode-vi M-C  confirm kill-window
bind -T copy-mode-vi M-N  new-window      -c '#{pane_current_path}'
bind -T copy-mode-vi M-S  split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-V  split-window -h -c '#{pane_current_path}'


# copy-mode with vim keys
# search for url etc
bind \\ copy-mode \;    send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
bind -T copy-mode-vi \\ send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
# no regex syntax when doing incremental search :(
# https://github.com/tmux/tmux/issues/2205
bind /   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind ?   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi /   command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ?   command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi v   send -X begin-selection
bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind -T copy-mode-vi y   send -X copy-pipe
bind -T copy-mode-vi i   send -X cancel
bind -T copy-mode-vi a   send -X cancel
bind -T copy-mode-vi u   send -X halfpage-up
bind -T copy-mode-vi d   send -X halfpage-down
bind p paste-buffer -p
bind P command-prompt -p 'save history to file:' -I '~/tmux.history' \
    'capture-pane -S - -E -; save-buffer %1; delete-buffer'

# replace current session with an existing session
bind X \
  confirm -p "attach another session and kill current session (#S)? (y/n)" \
  "if-shell \"((\$(tmux display -p '#{session_many_attached}') > 0))\" \
    choose-session \
    \"run-shell \\\"tmux choose-session \
        \\\\\\\"switch-client -t '%%'; \
            kill-session -t '\$(tmux display -p '#S')'\\\\\\\"\\\"\""

# Use popup menu to select a layout
bind Space display-menu -x C -y C \
    -T '#[align=centre]Switch Layout' \
    'Tiled'           +  { select-layout tiled } \
    'Main Horizontal' _  { select-layout main-horizontal } \
    'Main Vertical'   |  { select-layout main-vertical } \
    'Even Horizontal' \\ { select-layout even-horizontal } \
    'Even Vertical'   -  { select-layout even-vertical }
